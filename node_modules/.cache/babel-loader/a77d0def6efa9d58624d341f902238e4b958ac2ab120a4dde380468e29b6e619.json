{"ast":null,"code":"import express from 'express';\nimport pg from 'pg';\nimport cors from 'cors';\nimport bcrypt from 'bcrypt'; // To hash and compare passwords\n\nconst app = express();\nconst port = 5000;\n\n// Middleware to parse JSON and handle CORS\napp.use(express.json());\napp.use(cors({\n  origin: 'http://localhost:3000'\n}));\n\n// PostgreSQL client setup\nconst db = new pg.Client({\n  user: 'postgres',\n  host: 'localhost',\n  database: 'Inventory',\n  password: 'rushikeshwayal@007',\n  port: 5432\n});\n\n// Connect to PostgreSQL\ndb.connect(err => {\n  if (err) {\n    console.error('Failed to connect to the database:', err);\n  } else {\n    console.log('Connected to the PostgreSQL database');\n  }\n});\n\n// Define API route to fetch items\napp.get('/', async (req, res) => {\n  try {\n    const result = await db.query('SELECT * FROM items');\n    res.json(result.rows);\n  } catch (err) {\n    console.error(err);\n    res.status(500).send('Server error');\n  }\n});\n\n// Define API route to fetch users\napp.get('/users', async (req, res) => {\n  try {\n    const result = await db.query('SELECT * FROM users');\n    res.json(result.rows);\n  } catch (err) {\n    console.error(err);\n    res.status(500).send('Server error');\n  }\n});\n\n// Register endpoint\napp.post('/api/register', async (req, res) => {\n  const {\n    name,\n    email,\n    password,\n    department\n  } = req.body;\n  try {\n    // Hash the password before storing it\n    const hashedPassword = await bcrypt.hash(password, 10);\n    await db.query('INSERT INTO users (name, email, password, department) VALUES ($1, $2, $3, $4)', [name, email, hashedPassword, department]);\n    res.status(201).json({\n      message: 'User registered successfully'\n    });\n  } catch (err) {\n    console.error('Error during registration:', err);\n    res.status(500).json({\n      message: 'Registration failed'\n    });\n  }\n});\n\n// Login endpoint\napp.post('/api/login', async (req, res) => {\n  const {\n    email,\n    password\n  } = req.body;\n  try {\n    const result = await db.query('SELECT * FROM users WHERE email = $1', [email]);\n    if (result.rows.length > 0) {\n      const user = result.rows[0];\n      const isPasswordValid = await bcrypt.compare(password, user.password);\n      if (isPasswordValid) {\n        res.status(200).json({\n          message: 'Login successful',\n          department: user.department\n        });\n      } else {\n        res.status(401).json({\n          message: 'Invalid email or password'\n        });\n      }\n    } else {\n      res.status(401).json({\n        message: 'Invalid email or password'\n      });\n    }\n  } catch (err) {\n    console.error('Error during login:', err);\n    res.status(500).json({\n      message: 'Login failed'\n    });\n  }\n});\n\n// Start the server\napp.listen(port, () => {\n  console.log(`Server running at http://localhost:${port}`);\n});","map":{"version":3,"names":["express","pg","cors","bcrypt","app","port","use","json","origin","db","Client","user","host","database","password","connect","err","console","error","log","get","req","res","result","query","rows","status","send","post","name","email","department","body","hashedPassword","hash","message","length","isPasswordValid","compare","listen"],"sources":["G:/Hack Indore/React Main/my-app/src/components/Login_Registration/LoginForm.jsx"],"sourcesContent":["import express from 'express';\r\nimport pg from 'pg';\r\nimport cors from 'cors';\r\nimport bcrypt from 'bcrypt'; // To hash and compare passwords\r\n\r\nconst app = express();\r\nconst port = 5000;\r\n\r\n// Middleware to parse JSON and handle CORS\r\napp.use(express.json());\r\napp.use(cors({\r\n  origin: 'http://localhost:3000'\r\n}));\r\n\r\n// PostgreSQL client setup\r\nconst db = new pg.Client({\r\n  user: 'postgres',\r\n  host: 'localhost',\r\n  database: 'Inventory',\r\n  password: 'rushikeshwayal@007',\r\n  port: 5432,\r\n});\r\n\r\n// Connect to PostgreSQL\r\ndb.connect((err) => {\r\n  if (err) {\r\n    console.error('Failed to connect to the database:', err);\r\n  } else {\r\n    console.log('Connected to the PostgreSQL database');\r\n  }\r\n});\r\n\r\n// Define API route to fetch items\r\napp.get('/', async (req, res) => {\r\n  try {\r\n    const result = await db.query('SELECT * FROM items');\r\n    res.json(result.rows);\r\n  } catch (err) {\r\n    console.error(err);\r\n    res.status(500).send('Server error');\r\n  }\r\n});\r\n\r\n// Define API route to fetch users\r\napp.get('/users', async (req, res) => {\r\n  try {\r\n    const result = await db.query('SELECT * FROM users');\r\n    res.json(result.rows);\r\n  } catch (err) {\r\n    console.error(err);\r\n    res.status(500).send('Server error');\r\n  }\r\n});\r\n\r\n// Register endpoint\r\napp.post('/api/register', async (req, res) => {\r\n  const { name, email, password, department } = req.body;\r\n\r\n  try {\r\n    // Hash the password before storing it\r\n    const hashedPassword = await bcrypt.hash(password, 10);\r\n\r\n    await db.query(\r\n      'INSERT INTO users (name, email, password, department) VALUES ($1, $2, $3, $4)',\r\n      [name, email, hashedPassword, department]\r\n    );\r\n\r\n    res.status(201).json({ message: 'User registered successfully' });\r\n  } catch (err) {\r\n    console.error('Error during registration:', err);\r\n    res.status(500).json({ message: 'Registration failed' });\r\n  }\r\n});\r\n\r\n// Login endpoint\r\napp.post('/api/login', async (req, res) => {\r\n  const { email, password } = req.body;\r\n\r\n  try {\r\n    const result = await db.query('SELECT * FROM users WHERE email = $1', [email]);\r\n\r\n    if (result.rows.length > 0) {\r\n      const user = result.rows[0];\r\n      const isPasswordValid = await bcrypt.compare(password, user.password);\r\n\r\n      if (isPasswordValid) {\r\n        res.status(200).json({ message: 'Login successful', department: user.department });\r\n      } else {\r\n        res.status(401).json({ message: 'Invalid email or password' });\r\n      }\r\n    } else {\r\n      res.status(401).json({ message: 'Invalid email or password' });\r\n    }\r\n  } catch (err) {\r\n    console.error('Error during login:', err);\r\n    res.status(500).json({ message: 'Login failed' });\r\n  }\r\n});\r\n\r\n// Start the server\r\napp.listen(port, () => {\r\n  console.log(`Server running at http://localhost:${port}`);\r\n});\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}